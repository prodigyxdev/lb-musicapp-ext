class YouTubeService{constructor(){this.oEmbedBaseUrl="https://www.youtube.com/oembed",this.thumbnailBaseUrl="https://img.youtube.com/vi",this.debug=!1}setDebug(t){this.debug=t}debugLog(...t){this.debug&&console.log(...t)}debugWarn(...t){this.debug&&console.warn(...t)}debugError(...t){this.debug&&console.error(...t)}getLocalizedString(t){return window.musicApp&&window.musicApp.t?window.musicApp.t(t):t}isValidYouTubeUrl(t){return[/^https?:\/\/(www\.)?youtube\.com\/watch\?v=([^&]+)/,/^https?:\/\/youtu\.be\/([^?]+)/,/^https?:\/\/(www\.)?youtube\.com\/embed\/([^?]+)/,/^https?:\/\/(www\.)?youtube\.com\/v\/([^?]+)/].some(e=>e.test(t))}extractVideoId(t){const e=[/(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&?]+)/,/youtube\.com\/watch\?.*v=([^&]+)/];for(const u of e){const e=t.match(u);if(e)return e[1]}return null}getThumbnailUrl(t,e="hqdefault"){return`${this.thumbnailBaseUrl}/${t}/${e}.jpg`}async fetchVideoMetadata(t){try{const e=`${this.oEmbedBaseUrl}?url=https://www.youtube.com/watch?v=${t}&format=json`,u=await fetch(e);if(!u.ok)throw new Error(`HTTP error! status: ${u.status}`);const o=await u.json();return{title:o.title||this.getLocalizedString("music.unknownTitle"),author:o.author_name||this.getLocalizedString("music.unknownArtist"),thumbnail:o.thumbnail_url||this.getThumbnailUrl(t),duration:o.duration||null,html:o.html||null}}catch(t){throw this.debugError("Error fetching YouTube metadata:",t),t}}async processYouTubeUrl(t){if(!this.isValidYouTubeUrl(t))throw new Error("Invalid YouTube URL");const e=this.extractVideoId(t);if(!e)throw new Error("Could not extract video ID from URL");try{const u=await this.fetchVideoMetadata(e);return{url:t,videoId:e,title:u.title,artist:u.author,thumbnail:u.thumbnail,duration:u.duration,source:"youtube"}}catch(u){return this.debugWarn("Failed to fetch metadata:",u),{url:t,videoId:e,title:this.getLocalizedString("music.unknownTitle"),artist:this.getLocalizedString("music.unknownArtist"),thumbnail:this.getThumbnailUrl(e),duration:null,source:"youtube"}}}async processMusicUrl(t){if(this.isValidYouTubeUrl(t))return await this.processYouTubeUrl(t);throw new Error("Unsupported music platform. Currently only YouTube is supported.")}normalizeYouTubeUrl(t){const e=this.extractVideoId(t);return e?`https://www.youtube.com/watch?v=${e}`:t}}window.YouTubeService=YouTubeService;
